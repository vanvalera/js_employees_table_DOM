{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// Create and append the form\nvar form = document.createElement(\"form\");\nform.classList.add(\"new-employee-form\");\nvar body = document.querySelector(\"body\");\nbody.append(form);\n// Create and append the table if it doesn't exist\nvar table = document.querySelector(\"table\");\nvar tableHead = table.querySelector(\"thead\");\nvar tableBody = table.querySelector(\"tbody\");\n// Initialize sorting variables\nvar sortedColumn = null;\nvar sortOrder = \"asc\";\n// Add form elements\nvar formName = '\\n  <label>\\n    Name:\\n    <input name=\"name\" data-qa=\"name\" type=\"text\" required>\\n  </label>\\n';\nvar formPosition = '\\n  <label>\\n    Position:\\n    <input name=\"position\" data-qa=\"position\" type=\"text\">\\n  </label>\\n';\nvar formOffice = '<label>Office: <select name=\\'office\\' data-qa=\\'office\\'> <option value=\"Tokyo\">Tokyo</option>\\n  <option value=\"Singapore\">Singapore</option>\\n  <option value=\"London\">London</option>\\n  <option value=\"New York\">New York</option>\\n  <option value=\"Edinburgh\">Edinburgh</option>\\n  <option value=\"San Francisco\">San Francisco</option></select></label>';\nvar formAge = '<label>Age: <input name=\"age\" data-qa=\"age\" type=\"number\" required></label>';\nvar formSalary = '\\n  <label>\\n    Salary:\\n    <input name=\"salary\" data-qa=\"salary\" type=\"number\" required>\\n  </label>\\n';\nvar formButton = '<button type=\"submit\">Save to table</button>';\nform.insertAdjacentHTML(\"afterbegin\", formButton);\nform.insertAdjacentHTML(\"afterbegin\", formSalary);\nform.insertAdjacentHTML(\"afterbegin\", formAge);\nform.insertAdjacentHTML(\"afterbegin\", formOffice);\nform.insertAdjacentHTML(\"afterbegin\", formPosition);\nform.insertAdjacentHTML(\"afterbegin\", formName);\n// Helper function to format numbers as currency\nfunction formatCurrency(value) {\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0\n    }).format(value);\n}\n// Handle form submission\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var nameInput = form.querySelector('input[name=\"name\"]');\n    var ageInput = form.querySelector('input[name=\"age\"]');\n    var positionInput = form.querySelector('input[name=\"position\"]');\n    var officeSelect = form.querySelector('select[name=\"office\"]');\n    var salaryInput = form.querySelector('input[name=\"salary\"]');\n    document.querySelectorAll(\".notification\").forEach(function(notification) {\n        return notification.remove();\n    });\n    var hasNameError = false;\n    var hasAgeError = false;\n    if (nameInput.value.length < 4) {\n        var nameError = document.createElement(\"div\");\n        nameError.classList.add(\"notification\", \"error\", \"title\");\n        nameError.setAttribute(\"data-qa\", \"notification\");\n        nameError.textContent = \"Error, name must be minimum 4 letters\";\n        body.append(nameError);\n        setTimeout(function() {\n            nameError.remove();\n        }, 2000);\n        hasNameError = true;\n    }\n    if (!hasNameError && (ageInput.value < 18 || ageInput.value > 90)) {\n        var ageError = document.createElement(\"div\");\n        ageError.classList.add(\"notification\", \"error\", \"title\");\n        ageError.setAttribute(\"data-qa\", \"notification\");\n        ageError.textContent = \"Error, age must be 18-90 years\";\n        body.append(ageError);\n        setTimeout(function() {\n            ageError.remove();\n        }, 2000);\n        hasAgeError = true;\n    }\n    var positionError = !positionInput.value.trim();\n    var officeError = !officeSelect.value;\n    var salaryError = salaryInput.value <= 0 || isNaN(salaryInput.value);\n    if (positionError && !hasNameError && !hasAgeError) {\n        var positionErrorNotification = document.createElement(\"div\");\n        positionErrorNotification.classList.add(\"notification\", \"error\", \"title\");\n        positionErrorNotification.setAttribute(\"data-qa\", \"notification\");\n        positionErrorNotification.textContent = \"Error, position is required\";\n        body.append(positionErrorNotification);\n        setTimeout(function() {\n            positionErrorNotification.remove();\n        }, 2000);\n    }\n    if (positionError || officeError || salaryError || hasNameError || hasAgeError) return;\n    var successNotification = document.createElement(\"div\");\n    successNotification.classList.add(\"notification\", \"success\", \"title\");\n    successNotification.setAttribute(\"data-qa\", \"notification\");\n    successNotification.textContent = \"Success! All fields are correctly filled and submitted.\";\n    body.append(successNotification);\n    setTimeout(function() {\n        successNotification.remove();\n    }, 2000);\n    var newRow = tableBody.insertRow();\n    newRow.insertCell().textContent = nameInput.value;\n    newRow.insertCell().textContent = positionInput.value;\n    newRow.insertCell().textContent = officeSelect.value;\n    newRow.insertCell().textContent = ageInput.value;\n    newRow.insertCell().textContent = formatCurrency(salaryInput.value);\n    form.reset();\n});\ntableHead.addEventListener(\"click\", function(e) {\n    var _tableBody;\n    var th = e.target;\n    var index = Array.from(th.parentElement.children).indexOf(th);\n    if (index < 0) return;\n    if (index === sortedColumn) sortOrder = sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    else {\n        sortedColumn = index;\n        sortOrder = \"asc\";\n    }\n    var rowsTable = Array.from(tableBody.querySelectorAll(\"tr\"));\n    var sortedRows = rowsTable.sort(function(rowA, rowB) {\n        var cellA = rowA.cells[index].textContent.trim();\n        var cellB = rowB.cells[index].textContent.trim();\n        switch(index){\n            case 0:\n            case 1:\n            case 2:\n                return cellA.localeCompare(cellB);\n            case 3:\n                return +cellA - +cellB;\n            case 4:\n                return parseFloat(cellA.replace(/[^0-9.-]+/g, \"\")) - parseFloat(cellB.replace(/[^0-9.-]+/g, \"\"));\n            default:\n                return 0;\n        }\n    });\n    if (sortOrder === \"desc\") sortedRows.reverse();\n    tableBody.innerHTML = \"\";\n    (_tableBody = tableBody).append.apply(_tableBody, _to_consumable_array(sortedRows));\n    tableHead.querySelectorAll(\"th\").forEach(function(header, i) {\n        header.classList.toggle(\"active\", i === sortedColumn);\n    });\n});\ntableBody.addEventListener(\"click\", function(e) {\n    var target = e.target.closest(\"tr\");\n    if (!target) return;\n    tableBody.querySelectorAll(\"tr\").forEach(function(row) {\n        return row.classList.remove(\"active\");\n    });\n    target.classList.add(\"active\");\n});\n\n//# sourceMappingURL=index.1aaf8ca0.js.map\n","'use strict';\n\n// Create and append the form\nconst form = document.createElement('form');\n\nform.classList.add('new-employee-form');\n\nconst body = document.querySelector('body');\n\nbody.append(form);\n\n// Create and append the table if it doesn't exist\nconst table = document.querySelector('table');\n\nconst tableHead = table.querySelector('thead');\nconst tableBody = table.querySelector('tbody');\n\n// Initialize sorting variables\nlet sortedColumn = null;\nlet sortOrder = 'asc';\n\n// Add form elements\nconst formName = `\n  <label>\n    Name:\n    <input name=\"name\" data-qa=\"name\" type=\"text\" required>\n  </label>\n`;\n\nconst formPosition = `\n  <label>\n    Position:\n    <input name=\"position\" data-qa=\"position\" type=\"text\">\n  </label>\n`;\nconst formOffice = `<label>Office: <select name='office' data-qa='office'> <option value=\"Tokyo\">Tokyo</option>\n  <option value=\"Singapore\">Singapore</option>\n  <option value=\"London\">London</option>\n  <option value=\"New York\">New York</option>\n  <option value=\"Edinburgh\">Edinburgh</option>\n  <option value=\"San Francisco\">San Francisco</option></select></label>`;\nconst formAge =\n  '<label>Age: <input name=\"age\" data-qa=\"age\" type=\"number\" required></label>';\nconst formSalary = `\n  <label>\n    Salary:\n    <input name=\"salary\" data-qa=\"salary\" type=\"number\" required>\n  </label>\n`;\nconst formButton = `<button type=\"submit\">Save to table</button>`;\n\nform.insertAdjacentHTML('afterbegin', formButton);\nform.insertAdjacentHTML('afterbegin', formSalary);\nform.insertAdjacentHTML('afterbegin', formAge);\nform.insertAdjacentHTML('afterbegin', formOffice);\nform.insertAdjacentHTML('afterbegin', formPosition);\nform.insertAdjacentHTML('afterbegin', formName);\n\n// Helper function to format numbers as currency\nfunction formatCurrency(value) {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  }).format(value);\n}\n\n// Handle form submission\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const nameInput = form.querySelector('input[name=\"name\"]');\n  const ageInput = form.querySelector('input[name=\"age\"]');\n  const positionInput = form.querySelector('input[name=\"position\"]');\n  const officeSelect = form.querySelector('select[name=\"office\"]');\n  const salaryInput = form.querySelector('input[name=\"salary\"]');\n\n  document\n    .querySelectorAll('.notification')\n    .forEach((notification) => notification.remove());\n\n  let hasNameError = false;\n  let hasAgeError = false;\n\n  if (nameInput.value.length < 4) {\n    const nameError = document.createElement('div');\n\n    nameError.classList.add('notification', 'error', 'title');\n    nameError.setAttribute('data-qa', 'notification');\n    nameError.textContent = 'Error, name must be minimum 4 letters';\n    body.append(nameError);\n\n    setTimeout(() => {\n      nameError.remove();\n    }, 2000);\n\n    hasNameError = true;\n  }\n\n  if (!hasNameError && (ageInput.value < 18 || ageInput.value > 90)) {\n    const ageError = document.createElement('div');\n\n    ageError.classList.add('notification', 'error', 'title');\n    ageError.setAttribute('data-qa', 'notification');\n    ageError.textContent = 'Error, age must be 18-90 years';\n    body.append(ageError);\n\n    setTimeout(() => {\n      ageError.remove();\n    }, 2000);\n\n    hasAgeError = true;\n  }\n\n  const positionError = !positionInput.value.trim();\n  const officeError = !officeSelect.value;\n  const salaryError = salaryInput.value <= 0 || isNaN(salaryInput.value);\n\n  if (positionError && !hasNameError && !hasAgeError) {\n    const positionErrorNotification = document.createElement('div');\n\n    positionErrorNotification.classList.add('notification', 'error', 'title');\n    positionErrorNotification.setAttribute('data-qa', 'notification');\n    positionErrorNotification.textContent = 'Error, position is required';\n    body.append(positionErrorNotification);\n\n    setTimeout(() => {\n      positionErrorNotification.remove();\n    }, 2000);\n  }\n\n  if (\n    positionError ||\n    officeError ||\n    salaryError ||\n    hasNameError ||\n    hasAgeError\n  ) {\n    return;\n  }\n\n  const successNotification = document.createElement('div');\n\n  successNotification.classList.add('notification', 'success', 'title');\n  successNotification.setAttribute('data-qa', 'notification');\n\n  successNotification.textContent =\n    'Success! All fields are correctly filled and submitted.';\n  body.append(successNotification);\n\n  setTimeout(() => {\n    successNotification.remove();\n  }, 2000);\n\n  const newRow = tableBody.insertRow();\n\n  newRow.insertCell().textContent = nameInput.value;\n  newRow.insertCell().textContent = positionInput.value;\n  newRow.insertCell().textContent = officeSelect.value;\n  newRow.insertCell().textContent = ageInput.value;\n  newRow.insertCell().textContent = formatCurrency(salaryInput.value);\n\n  form.reset();\n});\n\ntableHead.addEventListener('click', (e) => {\n  const th = e.target;\n  const index = Array.from(th.parentElement.children).indexOf(th);\n\n  if (index < 0) {\n    return;\n  }\n\n  if (index === sortedColumn) {\n    sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n  } else {\n    sortedColumn = index;\n    sortOrder = 'asc';\n  }\n\n  const rowsTable = Array.from(tableBody.querySelectorAll('tr'));\n\n  const sortedRows = rowsTable.sort((rowA, rowB) => {\n    const cellA = rowA.cells[index].textContent.trim();\n    const cellB = rowB.cells[index].textContent.trim();\n\n    switch (index) {\n      case 0:\n      case 1:\n      case 2:\n        return cellA.localeCompare(cellB);\n\n      case 3:\n        return +cellA - +cellB;\n\n      case 4:\n        return (\n          parseFloat(cellA.replace(/[^0-9.-]+/g, '')) -\n          parseFloat(cellB.replace(/[^0-9.-]+/g, ''))\n        );\n\n      default:\n        return 0;\n    }\n  });\n\n  if (sortOrder === 'desc') {\n    sortedRows.reverse();\n  }\n\n  tableBody.innerHTML = '';\n  tableBody.append(...sortedRows);\n\n  tableHead.querySelectorAll('th').forEach((header, i) => {\n    header.classList.toggle('active', i === sortedColumn);\n  });\n});\n\ntableBody.addEventListener('click', (e) => {\n  const target = e.target.closest('tr');\n\n  if (!target) {\n    return;\n  }\n\n  tableBody\n    .querySelectorAll('tr')\n    .forEach((row) => row.classList.remove('active'));\n  target.classList.add('active');\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","form","document","createElement","classList","add","body","querySelector","append","table","tableHead","tableBody","sortedColumn","sortOrder","insertAdjacentHTML","addEventListener","e","preventDefault","nameInput","ageInput","positionInput","officeSelect","salaryInput","querySelectorAll","forEach","notification","remove","hasNameError","hasAgeError","value","nameError","setAttribute","textContent","setTimeout","ageError","positionError","trim","officeError","salaryError","isNaN","positionErrorNotification","successNotification","newRow","insertRow","insertCell","Intl","NumberFormat","style","currency","minimumFractionDigits","format","reset","th","target","index","from","parentElement","children","indexOf","sortedRows","rowsTable","sort","rowA","rowB","cellA","cells","cellB","localeCompare","parseFloat","replace","reverse","innerHTML","apply","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","header","toggle","closest","row"],"version":3,"file":"index.1aaf8ca0.js.map"}